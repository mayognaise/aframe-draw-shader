{"version":3,"file":"aframe-draw-shader.js","mappings":"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","sources":["webpack://aframe-draw-shader/./utils/canvas.js","webpack://aframe-draw-shader/./utils/fps.js","webpack://aframe-draw-shader/./utils/material.js","webpack://aframe-draw-shader/webpack/bootstrap","webpack://aframe-draw-shader/./src/index.js"],"sourcesContent":["exports.canvas = {\n  schema: {\n    width: { type: \"number\", default: 256 },\n    height: { type: \"number\", default: 256 },\n  },\n\n  _canvas: null,\n  _context: null,\n  _texture: null,\n\n  /**\n   * Seet canvas\n   * @protected\n   * @returns THREE.MeshBasicMaterial\n   */\n  _setCanvas(schema) {\n    this._canvas = document.createElement(\"canvas\");\n    this._updateTexture(schema);\n\n    this._context = this._canvas.getContext(\"2d\");\n    this._texture = new THREE.Texture(this._canvas);\n\n    this._clearCanvas();\n\n    return this._texture;\n  },\n\n  _clearCanvas() {\n    if (!this._canvas || !this._context || !this.__texture) {\n      return;\n    }\n    this._context.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    this._texture.needsUpdate = true;\n  },\n\n  /**\n   * Update or create texure.\n   * @param {Object} schema - Material component schema.\n   */\n  _updateTexture(schema) {\n    this._canvas.width = schema.width;\n    this._canvas.height = schema.height;\n  },\n};\n","exports.fps = {\n  schema: {\n    fps: { type: \"number\", default: 0 },\n  },\n\n  _fps: null,\n  _nextTick: null,\n\n  _setFps(schema) {\n    this._fps = schema.fps;\n    this._nextTick = 0;\n  },\n\n  _setNextTick() {\n    if (this._fps > 0) {\n      this._nextTick = Date.now() + 1000 / this._fps;\n    }\n  },\n\n  _fpsTick(callback) {\n    if (!callback || this._isFpsPaused()) {\n      return;\n    } else if (this._fps <= 0) {\n      callback();\n    } else {\n      if (Date.now() > this._nextTick) {\n        this._setNextTick();\n        callback();\n      }\n    }\n  },\n\n  _pauseFpsTick() {\n    this._nextTick = null;\n  },\n\n  _resumeFpsTick() {\n    this._nextTick = 0;\n  },\n\n  _isFpsPaused() {\n    return typeof this._nextTick !== \"number\";\n  },\n};\n","exports.material = {\n  schema: {\n    color: { type: \"color\" },\n    fog: { default: true },\n  },\n\n  _setMaterial(map) {\n    if (!map) {\n      throw \"Texuture is not set\";\n    }\n\n    this.material = new THREE.MeshBasicMaterial({ map });\n    this.el.sceneEl.addBehavior(this);\n  },\n\n  /**\n   * Updating existing material.\n   * @param {object} schema - Material component schema.\n   */\n  _updateMaterial(schema) {\n    const { material } = this;\n    const newData = this._getMaterialData(schema);\n    Object.keys(newData).forEach((key) => {\n      material[key] = newData[key];\n    });\n  },\n\n  /**\n   * Builds and normalize material schema, normalizing stuff along the way.\n   * @param {Object} schema - Material schema.\n   * @return {Object} schema - Processed material schema.\n   */\n  _getMaterialData(schema) {\n    return {\n      fog: schema.fog,\n      color: new THREE.Color(schema.color),\n    };\n  },\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const { canvas } = require(\"../utils/canvas\");\nconst { fps } = require(\"../utils/fps\");\nconst { material } = require(\"../utils/material\");\n\nif (typeof AFRAME === \"undefined\") {\n  throw \"Component attempted to register before AFRAME was available.\";\n}\n\nAFRAME.registerShader(\"draw\", {\n  ...canvas,\n  ...fps,\n  ...material,\n\n  schema: {\n    ...canvas.schema,\n    ...fps.schema,\n    ...material.schema,\n  },\n\n  /**\n   * Pause drawing.\n   * @public\n   */\n  pause() {\n    this._pauseFpsTick();\n  },\n\n  /**\n   * Play drawing.\n   * @public\n   */\n  play() {\n    if (!this.paused()) return;\n    this._resumeFpsTick();\n  },\n\n  /**\n   * Toggle playback. play if paused and pause if played.\n   * @public\n   */\n  togglePlayback() {\n    if (this.paused()) {\n      this.play();\n    } else {\n      this.pause();\n    }\n  },\n\n  /**\n   * Return if the playback is paused.\n   * @public\n   * @return {boolean}\n   */\n  paused() {\n    return this._isFpsPaused();\n  },\n\n  /**\n   * Initialize material. Called once.\n   * @protected\n   * @returns THREE.MeshBasicMaterial\n   */\n  init(schema) {\n    this._setFps(schema);\n    const map = this._setCanvas(schema);\n    this._setMaterial(map);\n\n    if (!this.material) {\n      throw \"Material is not set\";\n    }\n\n    return this.material;\n  },\n\n  /**\n   * Update or create material.\n   * @protected\n   * @param {object|null} schema Old schema\n   * @returns THREE.MeshBasicMaterial\n   */\n  update(schema) {\n    this._updateMaterial(schema);\n    this._updateTexture(schema);\n    this._setFps(schema);\n    return this.material;\n  },\n\n  /**\n   * Called on each scene tick.\n   * @protected\n   */\n  tick() {\n    const canvas = this._canvas;\n    const ctx = this._context;\n    const texture = this._texture;\n    if (!canvas || !ctx || !texture) return;\n    const emit = () => {\n      this.el.emit(\"draw-render\", { canvas, ctx, texture });\n      texture.needsUpdate = true;\n    };\n    this._fpsTick(emit);\n  },\n});\n"],"names":["exports","canvas","schema","width","type","default","height","_canvas","_context","_texture","_setCanvas","this","document","createElement","_updateTexture","getContext","THREE","Texture","_clearCanvas","__texture","clearRect","needsUpdate","fps","_fps","_nextTick","_setFps","_setNextTick","Date","now","_fpsTick","callback","_isFpsPaused","_pauseFpsTick","_resumeFpsTick","material","color","fog","_setMaterial","map","MeshBasicMaterial","el","sceneEl","addBehavior","_updateMaterial","newData","_getMaterialData","Object","keys","forEach","key","Color","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","module","__webpack_modules__","AFRAME","registerShader","pause","play","paused","togglePlayback","init","update","tick","ctx","texture","emit"],"sourceRoot":""}